#!/bin/bash

# Horizontal Domain Correlation
# Find all possible domains
#
# New sources to look
# https://github.com/vysecurity/DomLink
# https://www.whoxy.com/

if [ $# -eq 1 ]; then

    domain="$1"

    curl_agent="\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\""
    curl_timeout="3"
    curl_options=(-A "${curl_agent}" -k -s --max-time "${curl_timeout}" --connect-timeout "${curl_timeout}")
    day="$(date +%Y%m%d)"
    emails=($(whois "${domain}" | grep -Ei "Registrant Email|^e-mail" | grep -E -ho "[[:graph:]]+@[[:graph:]]+"))
    owner_id="$(whois "${domain}" | grep -Ei "^ownerid:|^Registry.Domain.ID:" | awk -F':' '{print $2}' | sed 's/^[[:blank:]]*//')"
    excluded_ns="akam\.net|azure|cloudflare|aws"
    domains_ns+=($(dig +short +noall +answer +multiline "${domain}" @1.1.1.1 -t NS | sed 's/\.$//g' | grep -Ev "${excluded_ns}"))
    domains_ns+=($(dig +short +noall +answer +multiline "${domain}" -t NS | sed 's/\.$//g' | grep -Ev "${excluded_ns}"))
    domains_found_file="${domain}_hdc_found_${day}".txt
    domains_tmp_file="${domain}_hdc_tmp_${day}".txt
    domains_found_temp+=("${domain}")

    # https://api.builtwith.com/
    builtwith_api_url="https://api.builtwith.com"
    builtwith_api_key=""
    # https://docs.securitytrails.com/reference/domain-search
    securitytrails_api_url="https://api.securitytrails.com/v1"
    securitytrails_api_key="aWEt3K0Ar0DrMeYFOIMdLKTgGWNhOta3"
    # https://www.postman.com/whoisxmlapi-llc/workspace/whoisxmlapi/collection/18021624-8b6d22b4-f63a-4067-a80a-c0f613ea48c2
    whoisxmlapi_hdc_ns_url="https://reverse-ns.whoisxmlapi.com/api/v1"
    whoisxmlapi_hdc_whois_url="https://reverse-whois.whoisxmlapi.com/api/v2"
    whoisxmlapi_apikey="at_qlgv81ytsy47PtHRB5oKansOF0BAb"

    if [ -z "$(command -v html2text)" ]; then
        tput setaf 1; echo -e "Please, install html2text with:"
        tput setaf 7; echo "    pip install html2text"
        exit 1
    fi

    if [ "$(echo "${domain}" | awk -F "." '{print $NF}')" == "br" ]; then
        brazilian="yes"
        echo "It's a Brazilian domain, so we can see how much domains the ${owner_id} has."
        xsrf_token_value="$(curl -I -kLs -A "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36" "https://registro.br/v2/ajax/payment/policy/com.br" | grep -Ei "^set-cookie: " | awk '{print $2}' | sed 's/;$// ; s/^XSRF.*=//')"
        number_of_domains=$(curl -H "Cookie: XSRF=${xsrf_token_value}" -H "X-Xsrf-Token: ${xsrf_token_value}" -kLs -A "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36" "https://registro.br/v2/ajax/whois/?qr=${owner_id}" | jq ".[]" | grep DomainCount | awk -F':' '{print $2}' | sed 's/,$// ; s/^[[:blank:]]//')
    fi

    if [[ -n "${brazilian}" && "${brazilian}" == "yes" && ${number_of_domains} -gt 0 ]]; then
        echo "We have around ${number_of_domains} brazilian domain(s) to find!"
    fi

    tput setaf 4; echo -n "Searching domains... "
    tput setaf 7;

    for email in "${emails[@]}"; do

        # Domain Eye is a paid service, if you have an access
        # and would like to collaborate please PR
        # https://domaineye.com/reverse-whois/
   
        # Reverse Whois now has a captcha
        #domains_reversewhois+=($(curl -kLs "https://www.reversewhois.io/?searchterm=${email}" | \
        #    html2text | grep -E "^[0-9]"| awk '{print $2}' | sed 's/|//'))
        #domains_found_temp+=("${domains_reversewhois[@]}")

        domains_viewdns+=($(curl -kLs -A ${curl_agent} "https://viewdns.info/reversewhois/?q=${email}" | html2text | \
            grep -Po "[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([a-zA-Z0-9()@:%_\+.~#?&//=]*)" | \
            grep -Evi "viewdns|${email}|favicon\.ico|cloudflare.com"))
        domains_found_temp+=("${domains_viewdns[@]}")

    done
    
    for d in $(printf "%s\n" "${domains_found_temp[@]}" | sort -u); do
        domains_found+=("${d}")
    done
    unset d

    if [ ${#domains_found[@]} -gt 0 ]; then
        domains_horizontal+=($(echo "${domains_found[@]}" | tr ' ' '\n' | sort -u))
        printf "%s\n" "${domains_horizontal[@]}" >> "${domains_tmp_file}"
    fi

    if [[ -n "${builtwith_api_key}" ]] && [[ -n "${builtwith_api_url}" ]]; then
        curl "${curl_options[@]}" "${builtwith_api_url}/rv2/api.json?KEY=${builtwith_api_key}&LOOKUP=${domain}" \
            | jq -r '.Relationships[].Identifiers[].Matches[].Domain' 2> /dev/null | grep -v "${domain}" >> "${domains_tmp_file}"
        curl "${curl_options[@]}" "${builtwith_api_url}/redirect1/api.json?KEY=${builtwith_api_key}&LOOKUP=${domain}" \
            | jq -r '.Inbound[].Domain' 2> /dev/null | grep -v "${domain}" >> "${domains_tmp_file}"
    fi

    if [[ -n "${securitytrails_api_key}" ]] && [[ -n "${securitytrails_api_url}" ]]; then
        for email in "${emails[@]}"; do
            total_pages=$(curl "${curl_options[@]}" -X POST -H 'content-type: application/json' -H "APIKEY: ${securitytrails_api_key}" "${securitytrails_api_url}/domains/list?include_ips=false&scroll=false" --data '{"filter": {"whois_email": "'"${email}"'"}}' | jq -r '.meta.total_pages')
            for p in $(seq 1 ${total_pages}); do
                curl "${curl_options[@]}" -X POST -H 'content-type: application/json' -H "APIKEY: ${securitytrails_api_key}" \
                    "${securitytrails_api_url}/domains/list?include_ips=false&scroll=false&page=$p" \
                    --data '{"filter": {"whois_email": "'"${email}"'"}}' \
                    | jq -r '.records.[].hostname' 2> /dev/null >> "${domains_tmp_file}"
           done
        done

        for ns in "${domains_ns[@]}"; do
            total_pages=$(curl "${curl_options[@]}"  -X POST -H 'content-type: application/json' -H "APIKEY: ${securitytrails_api_key}" "${securitytrails_api_url}/domains/list?include_ips=false&scroll=false" --data '{"filter": {"ns": "'"${ns}"'"}}' | jq -r '.meta.total_pages')
            for p in $(seq 1 ${total_pages}); do
                curl "${curl_options[@]}"  -X POST -H 'content-type: application/json' -H "APIKEY: ${securitytrails_api_key}" \
                    "${securitytrails_api_url}/domains/list?include_ips=false&scroll=false&page=$p" \
                    --data '{"filter": {"ns": "'"${ns}"'"}}' \
                    | jq -r '.records.[].hostname' 2> /dev/null >> "${domains_tmp_file}"
            done
        done

        whois "${domain}" \
            | grep -Ei "^owner:|^person:|^Registrant Organization:|^Tech Organization:" \
            | awk -F':' '{print $2}' \
            | sed 's/^[[:blank:]]*//' | \
            while read company_name; do
                total_pages=$(curl "${curl_options[@]}" -X POST -H 'content-type: application/json' -H "APIKEY: ${securitytrails_api_key}" "${securitytrails_api_url}/domains/list?include_ips=false&scroll=false" --data '{"filter": {"whois_organization": "'"${company_name}"'"}}' | jq -r '.meta.total_pages')
                for p in $(seq 1 ${total_pages}); do
                    curl "${curl_options[@]}" -X POST -H 'content-type: application/json' -H "APIKEY: ${securitytrails_api_key}" \
                        "${securitytrails_api_url}/domains/list?include_ips=false&scroll=false&page=$p" \
                        --data '{"filter": {"whois_organization": "'"${company_name}"'"}}' \
                        | jq -r '.records.[].hostname' 2> /dev/null >> "${domains_tmp_file}"
                done
            done
    fi

    if [[ -n "${whoisxmlapi_apikey}" ]] && [[ -n "${whoisxmlapi_hdc_ns_url}" ]]; then
        for ns in "${domains_ns[@]}"; do
            curl "${curl_options[@]}" -H "Content-Type: application/json" "${whoisxmlapi_hdc_ns_url}?apikey=${whoisxmlapi_apikey}&ns=${ns}" \
                | jq -r '.result.[].name' 2> /dev/null | sort -u >> "${domains_tmp_file}" 
            unset ns
        done
    fi

    if [[ -n "${whoisxmlapi_apikey}" ]] && [[ -n "${whoisxmlapi_hdc_whois_url}" ]]; then
        whois "${domain}" \
            | grep -Ei "^owner:|^person:|^Registrant Organization:|^Tech Organization:" \
            | awk -F':' '{print $2}' \
            | sed 's/^[[:blank:]]*//' | \
            while read company_name; do
                curl "${curl_options[@]}" -H "Content-Type: application/json" "${whoisxmlapi_hdc_whois_url}" \
                    --data '{"apiKey":"'${whoisxmlapi_apikey}'", "searchType": "current", "mode": "purchase", "punycode": true, "basicSearchTerms": {"include":["'"${company_name}"'"]}}' \
                    | jq -r '.domainsList.[]' 2> /dev/null >> "${domains_tmp_file}"
            done
    fi

    if [ -s "${domains_tmp_file}" ]; then
        tput setaf 4; echo "Done!"
        sort -u -o "${domains_found_file}" "${domains_tmp_file}"
        echo -e "We found $(wc -l "${domains_found_file}") domain(s)."
    else
        tput setaf 1; echo "No domains found, exiting!"
        exit 1
    fi

else
    echo "You need to inform a domain to execute this script!"
    exit 1
fi
rm -f "${domains_tmp_file}"
